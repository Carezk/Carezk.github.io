<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zkBlog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-29T01:16:26.895Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>表示数值的字符串</title>
    <link href="http://yoursite.com/2018/08/29/%E8%A1%A8%E7%A4%BA%E6%95%B0%E5%80%BC%E7%9A%84%E9%A2%9D%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2018/08/29/表示数值的额字符串/</id>
    <published>2018-08-29T01:02:23.000Z</published>
    <updated>2018-08-29T01:16:26.895Z</updated>
    
    <content type="html"><![CDATA[<p>题目描述</p><ul><li>请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串”+100”,”5e2”,”-123”,”3.1416”和”-1E-16”都表示数值。但是”12e”,”1a3.14”,”1.2.3”,”+-5”和”12e+4.3”都不是。<br>解题思路</li><li>思路一：</li></ul><p>利用正则表达式，对字符串中的每个字符进行判断分析</p><p>思路二：</p><p>利用自身的格式校验</p><p>思路三：</p><p>1.对字符串中的每个字符进行判断分析<br>2.e（E）后面只能接数字，并且不能出现2次<br>3.对于+、-号，只能出现在第一个字符或者是e的后一位<br>4.对于小数点，不能出现2次，e后面不能出现小数点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">private int index;</span><br><span class="line"></span><br><span class="line">public boolean isNumeric(char[] str) &#123;</span><br><span class="line">if (str == null || str.length == 0) &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">// 标记符号，小数点，e是否出现过</span><br><span class="line">boolean sign = false, decimal = false, hasE = false;</span><br><span class="line">for (int i = 0; i &lt; str.length; i++) &#123;</span><br><span class="line">if (str[i] == &apos;e&apos; || str[i] == &apos;E&apos;) &#123;</span><br><span class="line">if (i == str.length) &#123;// e后面接数字</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">if (hasE) &#123;// 不能同时存在两个</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125; else if (str[i] == &apos;+&apos; || str[i] == &apos;-&apos;) &#123;</span><br><span class="line">//第二次出现+-符号，则必须紧接在e之后</span><br><span class="line">if (sign &amp;&amp; str[i - 1] != &apos;e&apos; &amp;&amp; str[i - 1] != &apos;E&apos;) &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">//第一次出现+-符号，且不是出现在第一个字符，也必须紧接在e之后</span><br><span class="line">if (!sign &amp;&amp; i &gt; 0 &amp;&amp; str[i - 1] != &apos;e&apos; &amp;&amp; str[i - 1] != &apos;E&apos;) &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">sign = true;</span><br><span class="line">&#125; else if (str[i] == &apos;.&apos;) &#123;</span><br><span class="line">// e后面不能接小数，小数点后不能出现两次</span><br><span class="line">if (hasE || decimal) &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">decimal = true;</span><br><span class="line">&#125; else if (str[i] &lt; &apos;0&apos; || str[i] &gt; &apos;9&apos;) &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">    /**</span><br><span class="line"> * 自身校验</span><br><span class="line"> */</span><br><span class="line">public boolean isNumeric_2(char[] str) &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           double number = Double.parseDouble(new String(str));</span><br><span class="line">       &#125; catch (NumberFormatException e) &#123;</span><br><span class="line">           return false;</span><br><span class="line">       &#125;</span><br><span class="line">       return true;</span><br><span class="line">   &#125;</span><br><span class="line">/**</span><br><span class="line">    * 利用正则表达式</span><br><span class="line">    * [\\+\\-]?                    正或负符号出现与否</span><br><span class="line">    * \\d*                         整数部分是否出现，如-.34 或 +3.34均符合</span><br><span class="line">    * (\\.\\d+)?                   如果出现小数点，那么小数点后面必须有数字；否则一起不出现</span><br><span class="line">    * ([eE][\\+\\-]?\\d+)?         如果存在指数部分，那么e或E肯定出现，+或-可以不出现，紧接着必须跟着整数；或者整个部分都不出现</span><br><span class="line">    *</span><br><span class="line">    * @param str</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">   public boolean isNumeric_3(char[] str) &#123;</span><br><span class="line">       return new String(str).matches(&quot;[\\+\\-]?\\d*(\\.\\d+)?([eE][\\+\\-]?\\d+)?&quot;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目描述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串”+100”,”5e2”,”-123”,”3.1416”和”-1E-16”都表示数值。但是”12e”,”1a3.14”,”1.2.3”,”+-5”和”12e+4.3”
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>测试博客</title>
    <link href="http://yoursite.com/2018/08/27/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/"/>
    <id>http://yoursite.com/2018/08/27/TCP三次握手/</id>
    <published>2018-08-27T10:58:23.000Z</published>
    <updated>2018-08-27T11:02:19.721Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="TCP工作原理"><a href="#TCP工作原理" class="headerlink" title="TCP工作原理"></a>TCP工作原理</h2><p>TCP的连接建立过程又称为TCP三次握手。首先发送方主机向接收方主机发起一个建立连接的同步（SYN）请求；接收方主机在收到这个请求后向发送方主机回复一个同步/确认（SYN/ACK）应答；发送方主机收到此包后再向接收方主机发送一个确认（ACK），此时TCP连接成功建立，如图所示：<br><img src="https://i.imgur.com/XCFzwP7.jpg" alt=""><br>一旦初始的三次握手完成，在发送和接收主机之间将按顺序发送和确认段。关闭连接之前，TCP使用类似的握手过程验证两个主机是否都完成发送和接收全部数据。TCP工作过程比较复杂，包括的内容如下。</p><p>TCP连接关闭：发送方主机和目的主机建立TCP连接并完成数据传输后，会发送一个将结束标记置1的数据包，以关闭这个TCP连接，并同时释放该连接占用的缓冲区空间。</p><p>TCP重置：TCP允许在传输的过程中突然中断连接。</p><p>TCP数据排序和确认：在传输的过程中使用序列号和确认号来跟踪数据的接收情况。</p><p>TCP重传：在TCP的传输过程中，如果在重传超时时间内没有收到接收方主机对某数据包的确认回复，发送方主机就认为此数据包丢失，并再次发送这个数据包给接收方。</p><p>TCP延迟确认：TCP并不总是在接收到数据后立即对其进行确认，它允许主机在接收数据的同时发送自己的确认信息给对方。</p><p>TCP数据保护（校验和）：TCP是可靠传输的协议，它提供校验和计算来实现数据在传输过程中的完整性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;TCP工作原理&quot;&gt;&lt;a href=&quot;#TCP工作原理&quot; class=&quot;headerlink&quot; title=&quot;TCP工作原理&quot;&gt;&lt;/a&gt;TCP工作原理&lt;/h2&gt;&lt;p&gt;TCP的连接建立过程又称为TCP三次握手。首先发送方主机向接收方主机发起一个建立连接的同步
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网络基础</title>
    <link href="http://yoursite.com/2018/08/22/TCPIP%E5%8D%8F%E8%AE%AE/"/>
    <id>http://yoursite.com/2018/08/22/TCPIP协议/</id>
    <published>2018-08-22T11:22:23.000Z</published>
    <updated>2018-08-27T10:48:36.727Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP-IP协议-网络基础"><a href="#TCP-IP协议-网络基础" class="headerlink" title="TCP/IP协议 网络基础"></a>TCP/IP协议 网络基础</h2><p>参考书籍为《图解tcp/ip》-第五版。</p><p>下面是协议层从底层至顶层的一个模型图：<br><img src="https://i.imgur.com/BwGIr4g.png" alt=""><br>一、计算机网络的背景</p><p>1.1 计算机的发展</p><p>有人说：“20世纪最伟大的发明就是计算机”，自诞生伊始，计算机经历了一系列发展，从大型通用计算机、超级计算机、小型机、个人电脑、工作站以及现如今笔记本、平板、智能手机等，</p><p>计算机已经彻底融入了我们的生活</p><p>1.2 计算机的发展模式</p><p>起初，计算机只是以单机模式（独立模式）被广泛应用，随着发展，计算机被一个个的连接起来，形成了一个计算机网路，从而实现了信息共享，远距离传递信息等工作</p><p>计算机网络，根据规模可分为2种：</p><p>WAN：Wide Area Network（广域网）</p><p>LAN：Local Area Nerwork（局域网）</p><p>二、计算机与网络发展的七个阶段</p><p>1.1 批处理</p><p>Batch Processing：事先将用户程序和数据装入卡带或磁带，由计算机按一定顺序读取，使用户要执行的程序和数据能够一并批量得到处理的方式</p><p>1.2 分时系统TSS</p><p>Time Sharing System：多个终端和同一个计算机相连，允许多个用户同时使用一台计算机系统</p><p>特性：多路性、独占性、交互性、及时性</p><p>1.3 计算机间的通信</p><p>计算机之间以通信线路连接，加快了数据读取时间，极大地缩短了传输数据时间，多台计算机分布式处理，架构变得更加灵活，操作更加人性化</p><p>1.4 计算机网络</p><p>窗口系统的产生，方便了用户操作，用户不仅可以同时执行多个程序，还能自由切换作业</p><p>窗口系统：在计算机上可以打开多个图形窗口进行处理的系统。代表性的有常用于Unix上的 X Window System、微软的Windows、苹果的Mac OS X等</p><p>1.5 互联网的出现</p><p>异构型计算机连接和电子邮件、万维网等信息传播方式促使互联网开始从大到整个公司小到一个家庭内部开始普及互联网，实现了世界各地用户通过接入互联网而即时沟通与交流</p><p>1.6 互联网技术为中心的时代</p><p>代表性事件：作为通信基础设施、支撑通信网络的电话网，被IP网所替代</p><p>1.7 “单纯建立连接”到“安全建立连接”</p><p>互联网时代给人带来了高度便捷的信息网络环境，但也带来了负面的问题：计算机病毒、信息泄露、网络欺诈等，出于个人信息安全以及数据通信更加安全便捷，安全建立连接自然而然的出现了<br><img src="https://i.imgur.com/MbqbDGg.png" alt=""><br>三、协议</p><p>1.1 随处可见的协议</p><p>互联网中常用的代表性的协议有IP、TCP、HTTP等，LAN中常用协议有IPX、SPX等</p><p>“计算机网络体系结构”将这些网络协议进行了系统的归纳；TCP/IP就是这些协议的集合<br><img src="https://i.imgur.com/PWQL9Eu.png" alt=""><br>其中，还有Novell公司的IPX/SPX、苹果公司的AppleTalk（仅限苹果公司计算机使用）、IBM开发的用于构件大规模网络的SNA以及前DEC公司开发的DECnet等</p><p>1.2 协议的必要性</p><p>简单来说，协议就是计算机之间通过网络实现通信时事先达成的一种“约定”；这种“约定”使那些由不同厂商的设备，不同CPU及不同操作系统组成的计算机之间，只要遵循相同的协议就可以实现通信</p><p>协议可以分很多种，每一种协议都明确界定了它的行为规范：2台计算机之间必须能够支持相同的协议，并且遵循相同的协议进行处理，才能实现相互通信</p><p>四、协议的标准化</p><p>计算机通信诞生之初，系统化与标准化未收到重视，不同厂商只出产各自的网络来实现通信，这样就造成了对用户使用计算机网络造成了很大障碍，缺乏灵活性和可扩展性</p><p>为解决该问题，ISO（国际标准化组织）制定了一个国际标准OSI（开放式通信系统互联参考模型）</p><p>TCP/IP并非ISO指定，是由IETF（国际互联网工程任务组）建议、致力推进标准化的一种协议，其中，大学等研究机构和计算机行业是推动标准化的核心力量，现已成为业界标准协议</p><p>协议的标准化也推动了计算机网络的普及</p><p>五、协议分层和OSI参考模型</p><p>1.1 协议的分层</p><p>概念：ISO在指定标准的OSI之前，提出了作为通信协议设计指标的OSI参考模型，将协议分为七层，使得原来复杂的网络协议更加简单化</p><p>定义：在七层模型中，每个分层都接受由它下一层所提供的特定服务，并且负责为自己的上一层提供特定的服务，上下层之间进行交互所遵循的约定叫做“接口”，同一层之间的交互所遵循的约定叫做“协议”</p><p>协议分层的优点：</p><p>每个分层可以独立使用，其实系统中某些分层发生变化，也不会影响整个系统，因此可以构造一个扩展性和灵活性都比较强的系统；</p><p>此外，通过分层可以细分通信功能，更易于单独实现每个分层的协议，界定各个分层的具体责任和义务 </p><p>协议分层的劣势：</p><p>过分模块化，处理变得更加沉重，以及每个模块都不得不事先相似的处理逻辑等。<br>1.2 OSI参考模型<img src="https://i.imgur.com/v9uoMRg.png" alt=""></p><p>实际上，分组通信协议很复杂，OSI参考模型将其分为了易于理解的七个分层，如下图：<br>不过，OSI参考模型只是一个模型，对各层只做了粗略的定义，并没有对接口和协议做详细的定义，想深入了解还需要学习具体的协议规范</p><p>1.3 OSI参考模型中每个分层的作用</p><p><img src="https://i.imgur.com/R0FODba.png" alt=""><br>1.3.1 应用层：为应用程序提供服务并规定应用程序中通信相关的细节；包括的协议如下：</p><p>①：超文本传输协议HTTP：这是一种最基本的客户机/服务器的访问协议；浏览器向服务器发送请求，而服务器回应相应的网页</p><p>②：文件传送协议FTP：提供交互式的访问，基于客户服务器模式，面向连接 使用TCP可靠的运输服务</p><p>   主要功能:减少/消除不同操作系统下文件的不兼容性 </p><p>③：远程登录协议TELNET：客户服务器模式，能适应许多计算机和操作系统的差异，网络虚拟终端NVT的意义</p><p>④：简单邮件传送协议SMTP：Client/Server模式，面向连接 </p><p>   基本功能：写信、传送、报告传送情况、显示信件、接收方处理信件 </p><p>⑤：DNS域名解析协议：DNS是一种用以将域名转换为IP地址的Internet服务</p><p>⑥：简单文件传送协议TFTP：客户服务器模式，使用UDP数据报，只支持文件传输，不支持交互，TFTP代码占内存小 </p><p>⑦：简单网络管理协议（SNMP）: SNMP模型的4个组件：被管理结点、管理站、管理信息、管理协议</p><p>   SNMP代理：运行SNMP管理进程的被管理结点</p><p>   对象：描述设备的变量</p><p>   管理信息库（MIB）：保存所有对象的数据结构</p><p>⑧DHCP动态主机配置协议: 发现协议中的引导文件名、空终止符、属名或者空,DHCP供应协议中的受限目录路径名 Options –可选参数字段，参考定义选择列表中的选择文件</p><p>1.3.2 表示层：将应用处理的信息转换为适合网络传输的格式，或将来自下一层的数据转换为上层能够处理的格式；主要负责数据格式的转换，确保一个系统的应用层信息可被另一个系统应用层读取</p><p>具体来说，就是将设备固有的数据格式转换为网络标准传输格式，不同设备对同一比特流解释的结果可能会不同；因此，主要负责使它们保持一致</p><p>1.3.3 会话层：负责建立和断开通信连接（数据流动的逻辑通路），记忆数据的分隔等数据传输相关的管理</p><p>PS：其实在应用层、表示层、会话层这三层，协议可以共用：<br><img src="https://i.imgur.com/nsRyRCb.png" alt=""></p><p>1.3.4 传输层：只在通信双方的节点上（比如计算机终端）进行处理，而无需在路由器上处理，传输层是OSI中最重要、最关键的一层,是唯一负责总体的数据传输和数据控制的一层；</p><p>传输层提供端到端的交换数据的机制，检查分组编号与次序，传输层对其上三层如会话层等，提供可靠的传输服务,对网络层提供可靠的目的地站点信息主要功能</p><p>在这一层，数据的单位称为数据段（segment）</p><p>主要功能：</p><p>①：为端到端连接提供传输服务</p><p>②：这种传输服务分为可靠和不可靠的,其中Tcp是典型的可靠传输,而Udp则是不可靠传输</p><p>③：为端到端连接提供流量控制,差错控制,服务质量(Quality of Service,QoS)等管理服务</p><p>包括的协议如下：</p><p>TCP：传输控制协议，传输效率低，可靠性强</p><p>UDP：用户数据报协议，适用于传输可靠性要求不高，数据量小的数据（比如QQ）</p><p>DCCP、SCTP、RTP、RSVP、PPTP等协议</p><p>具体的内容可参考这篇文章：<a href="http://book.51cto.com/art/200807/81191.htm" target="_blank" rel="noopener">http://book.51cto.com/art/200807/81191.htm</a></p><p>1.3.5 网络层：将数据传输到目标地址；目标地址可以使多个网络通过路由器连接而成的某一个地址，主要负责寻找地址和路由选择，网络层还可以实现拥塞控制、网际互连等功能</p><p>在这一层，数据的单位称为数据包（packet）</p><p>网络层协议的代表包括：IP、IPX、RIP、OSPF等</p><p>1.3.6 数据链路层：负责物理层面上的互联的、节点间的通信传输（例如一个以太网项链的2个节点之间的通信）；该层的作用包括：物理地址寻址、数据的成帧、流量控制、数据的检错、重发等。</p><p>在这一层，数据的单位称为帧（frame）</p><p>数据链路层协议的代表包括：ARP、RARP、SDLC、HDLC、PPP、STP、帧中继等</p><p>1.3.7 物理层：负责0、1 比特流（0/1序列）与电压的高低、逛的闪灭之间的转换</p><p>规定了激活、维持、关闭通信端点之间的机械特性、电气特性、功能特性以及过程特性；该层为上层协议提供了一个传输数据的物理媒体。只是说明标准</p><p>在这一层，数据的单位称为比特（bit）</p><p>属于物理层定义的典型规范代表包括：EIA/TIA RS-232、EIA/TIA RS-449、V.35、RJ-45、fddi令牌环网等</p><p>关于七层协议具体的协议以及定义规范，后面随笔会慢慢介绍，推荐一篇博客，有关七层协议的介绍：<a href="http://blog.csdn.net/lisa890608/article/details/8231666" target="_blank" rel="noopener">http://blog.csdn.net/lisa890608/article/details/8231666</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TCP-IP协议-网络基础&quot;&gt;&lt;a href=&quot;#TCP-IP协议-网络基础&quot; class=&quot;headerlink&quot; title=&quot;TCP/IP协议 网络基础&quot;&gt;&lt;/a&gt;TCP/IP协议 网络基础&lt;/h2&gt;&lt;p&gt;参考书籍为《图解tcp/ip》-第五版。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>测试博客</title>
    <link href="http://yoursite.com/2018/07/02/%E6%B5%8B%E8%AF%95%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/07/02/测试博客/</id>
    <published>2018-07-02T11:22:23.000Z</published>
    <updated>2018-08-27T10:47:58.411Z</updated>
    
    <content type="html"><![CDATA[<p>你好</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;你好&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
